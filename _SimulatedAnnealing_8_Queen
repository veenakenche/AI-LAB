import random
import math

def cost(state):
    attacks = 0
    n = len(state)
    for i in range(n):
        for j in range(i + 1, n):
            if state[i] == state[j]:
                attacks += 1
            elif abs(state[i] - state[j]) == abs(i - j):
                attacks += 1
    return attacks

def random_neighbor(state):
    n = len(state)
    new_state = state.copy()
    i = random.randint(0, n - 1)
    j = random.randint(0, n - 1)
    new_state[i], new_state[j] = new_state[j], new_state[i]
    return new_state

def simulated_annealing():
    current = [random.randint(0, 3) for _ in range(4)]
    T = 100.0
    cooling_rate = 0.99

    while T > 0.1:
        next_state = random_neighbor(current)
        delta_E = cost(current) - cost(next_state)

        if delta_E > 0:
            current = next_state
        else:
            if random.random() < math.exp(delta_E / T):
                current = next_state

        T *= cooling_rate

    return current

if __name__ == "__main__":
    solution = simulated_annealing()
    print("Final State:", solution)
    print("Attacking pairs:", cost(solution))
